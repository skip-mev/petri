// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/api/types/network"
	"github.com/docker/docker/api/types/volume"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	mock "github.com/stretchr/testify/mock"
	"go.uber.org/zap"
)

// NewMockDockerClient creates a new instance of MockDockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDockerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDockerClient {
	mock := &MockDockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDockerClient is an autogenerated mock type for the DockerClient type
type MockDockerClient struct {
	mock.Mock
}

type MockDockerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDockerClient) EXPECT() *MockDockerClient_Expecter {
	return &MockDockerClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDockerClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDockerClient_Expecter) Close() *MockDockerClient_Close_Call {
	return &MockDockerClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDockerClient_Close_Call) Run(run func()) *MockDockerClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDockerClient_Close_Call) Return(err error) *MockDockerClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_Close_Call) RunAndReturn(run func() error) *MockDockerClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCreate provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _mock.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type MockDockerClient_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx
//   - config
//   - hostConfig
//   - networkingConfig
//   - platform
//   - containerName
func (_e *MockDockerClient_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *MockDockerClient_ContainerCreate_Call {
	return &MockDockerClient_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *MockDockerClient_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(*v1.Platform), args[5].(string))
	})
	return _c
}

func (_c *MockDockerClient_ContainerCreate_Call) Return(createResponse container.CreateResponse, err error) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Return(createResponse, err)
	return _c
}

func (_c *MockDockerClient_ContainerCreate_Call) RunAndReturn(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error)) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecAttach provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerExecAttach(ctx context.Context, execID string, config container.ExecStartOptions) (types.HijackedResponse, error) {
	ret := _mock.Called(ctx, execID, config)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) (types.HijackedResponse, error)); ok {
		return returnFunc(ctx, execID, config)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) types.HijackedResponse); ok {
		r0 = returnFunc(ctx, execID, config)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.ExecStartOptions) error); ok {
		r1 = returnFunc(ctx, execID, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerExecAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecAttach'
type MockDockerClient_ContainerExecAttach_Call struct {
	*mock.Call
}

// ContainerExecAttach is a helper method to define mock.On call
//   - ctx
//   - execID
//   - config
func (_e *MockDockerClient_Expecter) ContainerExecAttach(ctx interface{}, execID interface{}, config interface{}) *MockDockerClient_ContainerExecAttach_Call {
	return &MockDockerClient_ContainerExecAttach_Call{Call: _e.mock.On("ContainerExecAttach", ctx, execID, config)}
}

func (_c *MockDockerClient_ContainerExecAttach_Call) Run(run func(ctx context.Context, execID string, config container.ExecStartOptions)) *MockDockerClient_ContainerExecAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ExecStartOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerExecAttach_Call) Return(hijackedResponse types.HijackedResponse, err error) *MockDockerClient_ContainerExecAttach_Call {
	_c.Call.Return(hijackedResponse, err)
	return _c
}

func (_c *MockDockerClient_ContainerExecAttach_Call) RunAndReturn(run func(ctx context.Context, execID string, config container.ExecStartOptions) (types.HijackedResponse, error)) *MockDockerClient_ContainerExecAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecCreate provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerExecCreate(ctx context.Context, container1 string, config container.ExecOptions) (types.IDResponse, error) {
	ret := _mock.Called(ctx, container1, config)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecCreate")
	}

	var r0 types.IDResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) (types.IDResponse, error)); ok {
		return returnFunc(ctx, container1, config)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) types.IDResponse); ok {
		r0 = returnFunc(ctx, container1, config)
	} else {
		r0 = ret.Get(0).(types.IDResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.ExecOptions) error); ok {
		r1 = returnFunc(ctx, container1, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerExecCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecCreate'
type MockDockerClient_ContainerExecCreate_Call struct {
	*mock.Call
}

// ContainerExecCreate is a helper method to define mock.On call
//   - ctx
//   - container1
//   - config
func (_e *MockDockerClient_Expecter) ContainerExecCreate(ctx interface{}, container1 interface{}, config interface{}) *MockDockerClient_ContainerExecCreate_Call {
	return &MockDockerClient_ContainerExecCreate_Call{Call: _e.mock.On("ContainerExecCreate", ctx, container1, config)}
}

func (_c *MockDockerClient_ContainerExecCreate_Call) Run(run func(ctx context.Context, container1 string, config container.ExecOptions)) *MockDockerClient_ContainerExecCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ExecOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerExecCreate_Call) Return(iDResponse types.IDResponse, err error) *MockDockerClient_ContainerExecCreate_Call {
	_c.Call.Return(iDResponse, err)
	return _c
}

func (_c *MockDockerClient_ContainerExecCreate_Call) RunAndReturn(run func(ctx context.Context, container1 string, config container.ExecOptions) (types.IDResponse, error)) *MockDockerClient_ContainerExecCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecInspect provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerExecInspect(ctx context.Context, execID string) (container.ExecInspect, error) {
	ret := _mock.Called(ctx, execID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecInspect")
	}

	var r0 container.ExecInspect
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (container.ExecInspect, error)); ok {
		return returnFunc(ctx, execID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) container.ExecInspect); ok {
		r0 = returnFunc(ctx, execID)
	} else {
		r0 = ret.Get(0).(container.ExecInspect)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, execID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerExecInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecInspect'
type MockDockerClient_ContainerExecInspect_Call struct {
	*mock.Call
}

// ContainerExecInspect is a helper method to define mock.On call
//   - ctx
//   - execID
func (_e *MockDockerClient_Expecter) ContainerExecInspect(ctx interface{}, execID interface{}) *MockDockerClient_ContainerExecInspect_Call {
	return &MockDockerClient_ContainerExecInspect_Call{Call: _e.mock.On("ContainerExecInspect", ctx, execID)}
}

func (_c *MockDockerClient_ContainerExecInspect_Call) Run(run func(ctx context.Context, execID string)) *MockDockerClient_ContainerExecInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_ContainerExecInspect_Call) Return(execInspect container.ExecInspect, err error) *MockDockerClient_ContainerExecInspect_Call {
	_c.Call.Return(execInspect, err)
	return _c
}

func (_c *MockDockerClient_ContainerExecInspect_Call) RunAndReturn(run func(ctx context.Context, execID string) (container.ExecInspect, error)) *MockDockerClient_ContainerExecInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspect provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerInspect(ctx context.Context, container1 string) (types.ContainerJSON, error) {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspect")
	}

	var r0 types.ContainerJSON
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (types.ContainerJSON, error)); ok {
		return returnFunc(ctx, container1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) types.ContainerJSON); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		r0 = ret.Get(0).(types.ContainerJSON)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, container1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type MockDockerClient_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//   - ctx
//   - container1
func (_e *MockDockerClient_Expecter) ContainerInspect(ctx interface{}, container1 interface{}) *MockDockerClient_ContainerInspect_Call {
	return &MockDockerClient_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, container1)}
}

func (_c *MockDockerClient_ContainerInspect_Call) Run(run func(ctx context.Context, container1 string)) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_ContainerInspect_Call) Return(containerJSON types.ContainerJSON, err error) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Return(containerJSON, err)
	return _c
}

func (_c *MockDockerClient_ContainerInspect_Call) RunAndReturn(run func(ctx context.Context, container1 string) (types.ContainerJSON, error)) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerList(ctx context.Context, options container.ListOptions) ([]types.Container, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []types.Container
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]types.Container, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, container.ListOptions) []types.Container); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type MockDockerClient_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockDockerClient_Expecter) ContainerList(ctx interface{}, options interface{}) *MockDockerClient_ContainerList_Call {
	return &MockDockerClient_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *MockDockerClient_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *MockDockerClient_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(container.ListOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerList_Call) Return(containers []types.Container, err error) *MockDockerClient_ContainerList_Call {
	_c.Call.Return(containers, err)
	return _c
}

func (_c *MockDockerClient_ContainerList_Call) RunAndReturn(run func(ctx context.Context, options container.ListOptions) ([]types.Container, error)) *MockDockerClient_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerLogs provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerLogs(ctx context.Context, container1 string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, container1, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = returnFunc(ctx, container1, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_ContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerLogs'
type MockDockerClient_ContainerLogs_Call struct {
	*mock.Call
}

// ContainerLogs is a helper method to define mock.On call
//   - ctx
//   - container1
//   - options
func (_e *MockDockerClient_Expecter) ContainerLogs(ctx interface{}, container1 interface{}, options interface{}) *MockDockerClient_ContainerLogs_Call {
	return &MockDockerClient_ContainerLogs_Call{Call: _e.mock.On("ContainerLogs", ctx, container1, options)}
}

func (_c *MockDockerClient_ContainerLogs_Call) Run(run func(ctx context.Context, container1 string, options container.LogsOptions)) *MockDockerClient_ContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.LogsOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerLogs_Call) Return(readCloser io.ReadCloser, err error) *MockDockerClient_ContainerLogs_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockDockerClient_ContainerLogs_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.LogsOptions) (io.ReadCloser, error)) *MockDockerClient_ContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerRemove(ctx context.Context, container1 string, options container.RemoveOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type MockDockerClient_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx
//   - container1
//   - options
func (_e *MockDockerClient_Expecter) ContainerRemove(ctx interface{}, container1 interface{}, options interface{}) *MockDockerClient_ContainerRemove_Call {
	return &MockDockerClient_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, container1, options)}
}

func (_c *MockDockerClient_ContainerRemove_Call) Run(run func(ctx context.Context, container1 string, options container.RemoveOptions)) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerRemove_Call) Return(err error) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_ContainerRemove_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.RemoveOptions) error) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerStart(ctx context.Context, container1 string, options container.StartOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockDockerClient_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx
//   - container1
//   - options
func (_e *MockDockerClient_Expecter) ContainerStart(ctx interface{}, container1 interface{}, options interface{}) *MockDockerClient_ContainerStart_Call {
	return &MockDockerClient_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, container1, options)}
}

func (_c *MockDockerClient_ContainerStart_Call) Run(run func(ctx context.Context, container1 string, options container.StartOptions)) *MockDockerClient_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StartOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerStart_Call) Return(err error) *MockDockerClient_ContainerStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_ContainerStart_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.StartOptions) error) *MockDockerClient_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStop provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerStop(ctx context.Context, container1 string, options container.StopOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_ContainerStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStop'
type MockDockerClient_ContainerStop_Call struct {
	*mock.Call
}

// ContainerStop is a helper method to define mock.On call
//   - ctx
//   - container1
//   - options
func (_e *MockDockerClient_Expecter) ContainerStop(ctx interface{}, container1 interface{}, options interface{}) *MockDockerClient_ContainerStop_Call {
	return &MockDockerClient_ContainerStop_Call{Call: _e.mock.On("ContainerStop", ctx, container1, options)}
}

func (_c *MockDockerClient_ContainerStop_Call) Run(run func(ctx context.Context, container1 string, options container.StopOptions)) *MockDockerClient_ContainerStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StopOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerStop_Call) Return(err error) *MockDockerClient_ContainerStop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_ContainerStop_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.StopOptions) error) *MockDockerClient_ContainerStop_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerWait provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ContainerWait(ctx context.Context, containerID string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error) {
	ret := _mock.Called(ctx, containerID, condition)

	if len(ret) == 0 {
		panic("no return value specified for ContainerWait")
	}

	var r0 <-chan container.WaitResponse
	var r1 <-chan error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)); ok {
		return returnFunc(ctx, containerID, condition)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) <-chan container.WaitResponse); ok {
		r0 = returnFunc(ctx, containerID, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan container.WaitResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.WaitCondition) <-chan error); ok {
		r1 = returnFunc(ctx, containerID, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}
	return r0, r1
}

// MockDockerClient_ContainerWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerWait'
type MockDockerClient_ContainerWait_Call struct {
	*mock.Call
}

// ContainerWait is a helper method to define mock.On call
//   - ctx
//   - containerID
//   - condition
func (_e *MockDockerClient_Expecter) ContainerWait(ctx interface{}, containerID interface{}, condition interface{}) *MockDockerClient_ContainerWait_Call {
	return &MockDockerClient_ContainerWait_Call{Call: _e.mock.On("ContainerWait", ctx, containerID, condition)}
}

func (_c *MockDockerClient_ContainerWait_Call) Run(run func(ctx context.Context, containerID string, condition container.WaitCondition)) *MockDockerClient_ContainerWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.WaitCondition))
	})
	return _c
}

func (_c *MockDockerClient_ContainerWait_Call) Return(waitResponseCh <-chan container.WaitResponse, errCh <-chan error) *MockDockerClient_ContainerWait_Call {
	_c.Call.Return(waitResponseCh, errCh)
	return _c
}

func (_c *MockDockerClient_ContainerWait_Call) RunAndReturn(run func(ctx context.Context, containerID string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error)) *MockDockerClient_ContainerWait_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFromContainer provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) CopyFromContainer(ctx context.Context, container1 string, srcPath string) (io.ReadCloser, container.PathStat, error) {
	ret := _mock.Called(ctx, container1, srcPath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFromContainer")
	}

	var r0 io.ReadCloser
	var r1 container.PathStat
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, container.PathStat, error)); ok {
		return returnFunc(ctx, container1, srcPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, container1, srcPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) container.PathStat); ok {
		r1 = returnFunc(ctx, container1, srcPath)
	} else {
		r1 = ret.Get(1).(container.PathStat)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, container1, srcPath)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDockerClient_CopyFromContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFromContainer'
type MockDockerClient_CopyFromContainer_Call struct {
	*mock.Call
}

// CopyFromContainer is a helper method to define mock.On call
//   - ctx
//   - container1
//   - srcPath
func (_e *MockDockerClient_Expecter) CopyFromContainer(ctx interface{}, container1 interface{}, srcPath interface{}) *MockDockerClient_CopyFromContainer_Call {
	return &MockDockerClient_CopyFromContainer_Call{Call: _e.mock.On("CopyFromContainer", ctx, container1, srcPath)}
}

func (_c *MockDockerClient_CopyFromContainer_Call) Run(run func(ctx context.Context, container1 string, srcPath string)) *MockDockerClient_CopyFromContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDockerClient_CopyFromContainer_Call) Return(readCloser io.ReadCloser, pathStat container.PathStat, err error) *MockDockerClient_CopyFromContainer_Call {
	_c.Call.Return(readCloser, pathStat, err)
	return _c
}

func (_c *MockDockerClient_CopyFromContainer_Call) RunAndReturn(run func(ctx context.Context, container1 string, srcPath string) (io.ReadCloser, container.PathStat, error)) *MockDockerClient_CopyFromContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToContainer provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) CopyToContainer(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions) error {
	ret := _mock.Called(ctx, container1, path, content, options)

	if len(ret) == 0 {
		panic("no return value specified for CopyToContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error); ok {
		r0 = returnFunc(ctx, container1, path, content, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_CopyToContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToContainer'
type MockDockerClient_CopyToContainer_Call struct {
	*mock.Call
}

// CopyToContainer is a helper method to define mock.On call
//   - ctx
//   - container1
//   - path
//   - content
//   - options
func (_e *MockDockerClient_Expecter) CopyToContainer(ctx interface{}, container1 interface{}, path interface{}, content interface{}, options interface{}) *MockDockerClient_CopyToContainer_Call {
	return &MockDockerClient_CopyToContainer_Call{Call: _e.mock.On("CopyToContainer", ctx, container1, path, content, options)}
}

func (_c *MockDockerClient_CopyToContainer_Call) Run(run func(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions)) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(container.CopyToContainerOptions))
	})
	return _c
}

func (_c *MockDockerClient_CopyToContainer_Call) Return(err error) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_CopyToContainer_Call) RunAndReturn(run func(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions) error) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInspectWithRaw provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ImageInspectWithRaw(ctx context.Context, imageID string) (types.ImageInspect, []byte, error) {
	ret := _mock.Called(ctx, imageID)

	if len(ret) == 0 {
		panic("no return value specified for ImageInspectWithRaw")
	}

	var r0 types.ImageInspect
	var r1 []byte
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (types.ImageInspect, []byte, error)); ok {
		return returnFunc(ctx, imageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) types.ImageInspect); ok {
		r0 = returnFunc(ctx, imageID)
	} else {
		r0 = ret.Get(0).(types.ImageInspect)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = returnFunc(ctx, imageID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, imageID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDockerClient_ImageInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInspectWithRaw'
type MockDockerClient_ImageInspectWithRaw_Call struct {
	*mock.Call
}

// ImageInspectWithRaw is a helper method to define mock.On call
//   - ctx
//   - imageID
func (_e *MockDockerClient_Expecter) ImageInspectWithRaw(ctx interface{}, imageID interface{}) *MockDockerClient_ImageInspectWithRaw_Call {
	return &MockDockerClient_ImageInspectWithRaw_Call{Call: _e.mock.On("ImageInspectWithRaw", ctx, imageID)}
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) Run(run func(ctx context.Context, imageID string)) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) Return(imageInspect types.ImageInspect, bytes []byte, err error) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Return(imageInspect, bytes, err)
	return _c
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) RunAndReturn(run func(ctx context.Context, imageID string) (types.ImageInspect, []byte, error)) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) ImagePull(ctx context.Context, logger *zap.Logger, refStr string, options image.PullOptions) error {
	ret := _mock.Called(ctx, logger, refStr, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, image.PullOptions) error); ok {
		r0 = returnFunc(ctx, logger, refStr, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type MockDockerClient_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//   - ctx
//   - logger
//   - refStr
//   - options
func (_e *MockDockerClient_Expecter) ImagePull(ctx interface{}, logger interface{}, refStr interface{}, options interface{}) *MockDockerClient_ImagePull_Call {
	return &MockDockerClient_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, logger, refStr, options)}
}

func (_c *MockDockerClient_ImagePull_Call) Run(run func(ctx context.Context, logger *zap.Logger, refStr string, options image.PullOptions)) *MockDockerClient_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(string), args[3].(image.PullOptions))
	})
	return _c
}

func (_c *MockDockerClient_ImagePull_Call) Return(err error) *MockDockerClient_ImagePull_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_ImagePull_Call) RunAndReturn(run func(ctx context.Context, logger *zap.Logger, refStr string, options image.PullOptions) error) *MockDockerClient_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkCreate provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) NetworkCreate(ctx context.Context, name string, options network.CreateOptions) (network.CreateResponse, error) {
	ret := _mock.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkCreate")
	}

	var r0 network.CreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, network.CreateOptions) (network.CreateResponse, error)); ok {
		return returnFunc(ctx, name, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, network.CreateOptions) network.CreateResponse); ok {
		r0 = returnFunc(ctx, name, options)
	} else {
		r0 = ret.Get(0).(network.CreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, network.CreateOptions) error); ok {
		r1 = returnFunc(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_NetworkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkCreate'
type MockDockerClient_NetworkCreate_Call struct {
	*mock.Call
}

// NetworkCreate is a helper method to define mock.On call
//   - ctx
//   - name
//   - options
func (_e *MockDockerClient_Expecter) NetworkCreate(ctx interface{}, name interface{}, options interface{}) *MockDockerClient_NetworkCreate_Call {
	return &MockDockerClient_NetworkCreate_Call{Call: _e.mock.On("NetworkCreate", ctx, name, options)}
}

func (_c *MockDockerClient_NetworkCreate_Call) Run(run func(ctx context.Context, name string, options network.CreateOptions)) *MockDockerClient_NetworkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(network.CreateOptions))
	})
	return _c
}

func (_c *MockDockerClient_NetworkCreate_Call) Return(createResponse network.CreateResponse, err error) *MockDockerClient_NetworkCreate_Call {
	_c.Call.Return(createResponse, err)
	return _c
}

func (_c *MockDockerClient_NetworkCreate_Call) RunAndReturn(run func(ctx context.Context, name string, options network.CreateOptions) (network.CreateResponse, error)) *MockDockerClient_NetworkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkInspect provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) NetworkInspect(ctx context.Context, networkID string, options network.InspectOptions) (network.Inspect, error) {
	ret := _mock.Called(ctx, networkID, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkInspect")
	}

	var r0 network.Inspect
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) (network.Inspect, error)); ok {
		return returnFunc(ctx, networkID, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) network.Inspect); ok {
		r0 = returnFunc(ctx, networkID, options)
	} else {
		r0 = ret.Get(0).(network.Inspect)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, network.InspectOptions) error); ok {
		r1 = returnFunc(ctx, networkID, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_NetworkInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkInspect'
type MockDockerClient_NetworkInspect_Call struct {
	*mock.Call
}

// NetworkInspect is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - options
func (_e *MockDockerClient_Expecter) NetworkInspect(ctx interface{}, networkID interface{}, options interface{}) *MockDockerClient_NetworkInspect_Call {
	return &MockDockerClient_NetworkInspect_Call{Call: _e.mock.On("NetworkInspect", ctx, networkID, options)}
}

func (_c *MockDockerClient_NetworkInspect_Call) Run(run func(ctx context.Context, networkID string, options network.InspectOptions)) *MockDockerClient_NetworkInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(network.InspectOptions))
	})
	return _c
}

func (_c *MockDockerClient_NetworkInspect_Call) Return(inspect network.Inspect, err error) *MockDockerClient_NetworkInspect_Call {
	_c.Call.Return(inspect, err)
	return _c
}

func (_c *MockDockerClient_NetworkInspect_Call) RunAndReturn(run func(ctx context.Context, networkID string, options network.InspectOptions) (network.Inspect, error)) *MockDockerClient_NetworkInspect_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkRemove provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) NetworkRemove(ctx context.Context, networkID string) error {
	ret := _mock.Called(ctx, networkID)

	if len(ret) == 0 {
		panic("no return value specified for NetworkRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, networkID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_NetworkRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkRemove'
type MockDockerClient_NetworkRemove_Call struct {
	*mock.Call
}

// NetworkRemove is a helper method to define mock.On call
//   - ctx
//   - networkID
func (_e *MockDockerClient_Expecter) NetworkRemove(ctx interface{}, networkID interface{}) *MockDockerClient_NetworkRemove_Call {
	return &MockDockerClient_NetworkRemove_Call{Call: _e.mock.On("NetworkRemove", ctx, networkID)}
}

func (_c *MockDockerClient_NetworkRemove_Call) Run(run func(ctx context.Context, networkID string)) *MockDockerClient_NetworkRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_NetworkRemove_Call) Return(err error) *MockDockerClient_NetworkRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_NetworkRemove_Call) RunAndReturn(run func(ctx context.Context, networkID string) error) *MockDockerClient_NetworkRemove_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) Ping(ctx context.Context) (types.Ping, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 types.Ping
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (types.Ping, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) types.Ping); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(types.Ping)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDockerClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx
func (_e *MockDockerClient_Expecter) Ping(ctx interface{}) *MockDockerClient_Ping_Call {
	return &MockDockerClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockDockerClient_Ping_Call) Run(run func(ctx context.Context)) *MockDockerClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDockerClient_Ping_Call) Return(ping types.Ping, err error) *MockDockerClient_Ping_Call {
	_c.Call.Return(ping, err)
	return _c
}

func (_c *MockDockerClient_Ping_Call) RunAndReturn(run func(ctx context.Context) (types.Ping, error)) *MockDockerClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeCreate provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) VolumeCreate(ctx context.Context, options volume.CreateOptions) (volume.Volume, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeCreate")
	}

	var r0 volume.Volume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) (volume.Volume, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) volume.Volume); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, volume.CreateOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_VolumeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeCreate'
type MockDockerClient_VolumeCreate_Call struct {
	*mock.Call
}

// VolumeCreate is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockDockerClient_Expecter) VolumeCreate(ctx interface{}, options interface{}) *MockDockerClient_VolumeCreate_Call {
	return &MockDockerClient_VolumeCreate_Call{Call: _e.mock.On("VolumeCreate", ctx, options)}
}

func (_c *MockDockerClient_VolumeCreate_Call) Run(run func(ctx context.Context, options volume.CreateOptions)) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.CreateOptions))
	})
	return _c
}

func (_c *MockDockerClient_VolumeCreate_Call) Return(volume1 volume.Volume, err error) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Return(volume1, err)
	return _c
}

func (_c *MockDockerClient_VolumeCreate_Call) RunAndReturn(run func(ctx context.Context, options volume.CreateOptions) (volume.Volume, error)) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeInspect provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) VolumeInspect(ctx context.Context, volumeID string) (volume.Volume, error) {
	ret := _mock.Called(ctx, volumeID)

	if len(ret) == 0 {
		panic("no return value specified for VolumeInspect")
	}

	var r0 volume.Volume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (volume.Volume, error)); ok {
		return returnFunc(ctx, volumeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) volume.Volume); ok {
		r0 = returnFunc(ctx, volumeID)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_VolumeInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeInspect'
type MockDockerClient_VolumeInspect_Call struct {
	*mock.Call
}

// VolumeInspect is a helper method to define mock.On call
//   - ctx
//   - volumeID
func (_e *MockDockerClient_Expecter) VolumeInspect(ctx interface{}, volumeID interface{}) *MockDockerClient_VolumeInspect_Call {
	return &MockDockerClient_VolumeInspect_Call{Call: _e.mock.On("VolumeInspect", ctx, volumeID)}
}

func (_c *MockDockerClient_VolumeInspect_Call) Run(run func(ctx context.Context, volumeID string)) *MockDockerClient_VolumeInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_VolumeInspect_Call) Return(volume1 volume.Volume, err error) *MockDockerClient_VolumeInspect_Call {
	_c.Call.Return(volume1, err)
	return _c
}

func (_c *MockDockerClient_VolumeInspect_Call) RunAndReturn(run func(ctx context.Context, volumeID string) (volume.Volume, error)) *MockDockerClient_VolumeInspect_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeList provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) VolumeList(ctx context.Context, options volume.ListOptions) (volume.ListResponse, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeList")
	}

	var r0 volume.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, volume.ListOptions) (volume.ListResponse, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, volume.ListOptions) volume.ListResponse); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.ListResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, volume.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDockerClient_VolumeList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeList'
type MockDockerClient_VolumeList_Call struct {
	*mock.Call
}

// VolumeList is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockDockerClient_Expecter) VolumeList(ctx interface{}, options interface{}) *MockDockerClient_VolumeList_Call {
	return &MockDockerClient_VolumeList_Call{Call: _e.mock.On("VolumeList", ctx, options)}
}

func (_c *MockDockerClient_VolumeList_Call) Run(run func(ctx context.Context, options volume.ListOptions)) *MockDockerClient_VolumeList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.ListOptions))
	})
	return _c
}

func (_c *MockDockerClient_VolumeList_Call) Return(listResponse volume.ListResponse, err error) *MockDockerClient_VolumeList_Call {
	_c.Call.Return(listResponse, err)
	return _c
}

func (_c *MockDockerClient_VolumeList_Call) RunAndReturn(run func(ctx context.Context, options volume.ListOptions) (volume.ListResponse, error)) *MockDockerClient_VolumeList_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeRemove provides a mock function for the type MockDockerClient
func (_mock *MockDockerClient) VolumeRemove(ctx context.Context, volumeID string, force bool) error {
	ret := _mock.Called(ctx, volumeID, force)

	if len(ret) == 0 {
		panic("no return value specified for VolumeRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, volumeID, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDockerClient_VolumeRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeRemove'
type MockDockerClient_VolumeRemove_Call struct {
	*mock.Call
}

// VolumeRemove is a helper method to define mock.On call
//   - ctx
//   - volumeID
//   - force
func (_e *MockDockerClient_Expecter) VolumeRemove(ctx interface{}, volumeID interface{}, force interface{}) *MockDockerClient_VolumeRemove_Call {
	return &MockDockerClient_VolumeRemove_Call{Call: _e.mock.On("VolumeRemove", ctx, volumeID, force)}
}

func (_c *MockDockerClient_VolumeRemove_Call) Run(run func(ctx context.Context, volumeID string, force bool)) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockDockerClient_VolumeRemove_Call) Return(err error) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDockerClient_VolumeRemove_Call) RunAndReturn(run func(ctx context.Context, volumeID string, force bool) error) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Return(run)
	return _c
}
