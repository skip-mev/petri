// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"tailscale.com/ipn/ipnstate"
)

// NewMockTailscaleLocalClient creates a new instance of MockTailscaleLocalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTailscaleLocalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTailscaleLocalClient {
	mock := &MockTailscaleLocalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTailscaleLocalClient is an autogenerated mock type for the TailscaleLocalClient type
type MockTailscaleLocalClient struct {
	mock.Mock
}

type MockTailscaleLocalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTailscaleLocalClient) EXPECT() *MockTailscaleLocalClient_Expecter {
	return &MockTailscaleLocalClient_Expecter{mock: &_m.Mock}
}

// Status provides a mock function for the type MockTailscaleLocalClient
func (_mock *MockTailscaleLocalClient) Status(ctx context.Context) (*ipnstate.Status, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *ipnstate.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*ipnstate.Status, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *ipnstate.Status); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ipnstate.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTailscaleLocalClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockTailscaleLocalClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx
func (_e *MockTailscaleLocalClient_Expecter) Status(ctx interface{}) *MockTailscaleLocalClient_Status_Call {
	return &MockTailscaleLocalClient_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *MockTailscaleLocalClient_Status_Call) Run(run func(ctx context.Context)) *MockTailscaleLocalClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTailscaleLocalClient_Status_Call) Return(status *ipnstate.Status, err error) *MockTailscaleLocalClient_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockTailscaleLocalClient_Status_Call) RunAndReturn(run func(ctx context.Context) (*ipnstate.Status, error)) *MockTailscaleLocalClient_Status_Call {
	_c.Call.Return(run)
	return _c
}
