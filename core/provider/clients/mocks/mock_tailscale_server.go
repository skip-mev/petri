// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTailscaleServer creates a new instance of MockTailscaleServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTailscaleServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTailscaleServer {
	mock := &MockTailscaleServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTailscaleServer is an autogenerated mock type for the TailscaleServer type
type MockTailscaleServer struct {
	mock.Mock
}

type MockTailscaleServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTailscaleServer) EXPECT() *MockTailscaleServer_Expecter {
	return &MockTailscaleServer_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function for the type MockTailscaleServer
func (_mock *MockTailscaleServer) Dial(ctx context.Context, network string, address string) (net.Conn, error) {
	ret := _mock.Called(ctx, network, address)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 net.Conn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (net.Conn, error)); ok {
		return returnFunc(ctx, network, address)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) net.Conn); ok {
		r0 = returnFunc(ctx, network, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, network, address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTailscaleServer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockTailscaleServer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - ctx
//   - network
//   - address
func (_e *MockTailscaleServer_Expecter) Dial(ctx interface{}, network interface{}, address interface{}) *MockTailscaleServer_Dial_Call {
	return &MockTailscaleServer_Dial_Call{Call: _e.mock.On("Dial", ctx, network, address)}
}

func (_c *MockTailscaleServer_Dial_Call) Run(run func(ctx context.Context, network string, address string)) *MockTailscaleServer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTailscaleServer_Dial_Call) Return(conn net.Conn, err error) *MockTailscaleServer_Dial_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockTailscaleServer_Dial_Call) RunAndReturn(run func(ctx context.Context, network string, address string) (net.Conn, error)) *MockTailscaleServer_Dial_Call {
	_c.Call.Return(run)
	return _c
}
